"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-ca(ogu17)%xk22)$lx)m6c1i+=c_yiox^vwl27b3-zci6b^gm6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

#ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '10.66.19.27', '192.168.137.1', '192.168.4.1']
ALLOWED_HOSTS = ['*', 'localhost', '127.0.0.1', '10.66.19.27', '192.168.137.1', '192.168.4.1', '.onrender.com', 'attendance-system-muqs.onrender.com']
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'admin_ui',
    'students',
    'camera_app',
    'attendance',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with fallback
DATABASE_URL = os.environ.get('DATABASE_URL')

# FORCE SQLITE TO FIX SERVER ERROR - UNCOMMENT WHEN READY FOR SUPABASE
FORCE_SQLITE = os.environ.get('FORCE_SQLITE', 'true').lower() == 'true'

print(f"üîß Database configuration: FORCE_SQLITE = {FORCE_SQLITE}")

if FORCE_SQLITE:
    # Force SQLite mode
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("‚úÖ Using SQLite database (forced mode)")
    
elif DATABASE_URL and 'postgresql' in DATABASE_URL:
    # Try PostgreSQL only if we have a valid URL
    try:
        import dj_database_url
        
        # For Supabase, try direct connection first
        if 'supabase.co' in DATABASE_URL:
            print("üéØ Attempting Supabase connection...")
            # Parse the URL manually to avoid dj_database_url issues
            from urllib.parse import urlparse
            parsed = urlparse(DATABASE_URL)
            
            db_config = {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': parsed.path.lstrip('/'),
                'USER': parsed.username,
                'PASSWORD': parsed.password,
                'HOST': parsed.hostname,
                'PORT': parsed.port or 5432,
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 10,
                }
            }
            print("üîß Using manual Supabase configuration")
        else:
            # Use dj_database_url for other PostgreSQL connections
            db_config = dj_database_url.parse(DATABASE_URL)
        
        # Supabase-specific optimizations
        if 'supabase.co' in DATABASE_URL:
            print("üéØ Using Supabase PostgreSQL database")
            # Optimize for Supabase
            db_config.update({
                'CONN_MAX_AGE': 60,  # Connection pooling
                'OPTIONS': {
                    'sslmode': 'require',  # Supabase requires SSL
                    'connect_timeout': 10,  # Connection timeout
                    'application_name': 'attendance_system',  # App identifier
                }
            })
            
            # Force IPv4 connection to avoid IPv6 issues
            if 'HOST' in db_config:
                # Try to resolve hostname to IPv4
                import socket
                try:
                    hostname = db_config['HOST']
                    ipv4_addresses = []
                    for info in socket.getaddrinfo(hostname, None, socket.AF_INET):
                        ipv4_addresses.append(info[4][0])
                    
                    if ipv4_addresses:
                        # Use first IPv4 address
                        db_config['HOST'] = ipv4_addresses[0]
                        print(f"üîß Forced IPv4 connection: {ipv4_addresses[0]}")
                    else:
                        print("‚ö†Ô∏è  No IPv4 addresses found for hostname")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Could not resolve IPv4: {e}")
        else:
            print("Using PostgreSQL database from DATABASE_URL")
            
        DATABASES = {
            'default': db_config
        }
    except Exception as e:
        print(f"‚ùå Error with PostgreSQL: {e}")
        print("üîÑ Falling back to SQLite")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Default to SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    print("üìÅ Using SQLite database (default fallback)")

# Auto-create database tables if they don't exist
import os
if os.environ.get('AUTO_CREATE_DB', 'True') == 'True':
    print("Auto-creating database tables...")
    try:
        from django.core.management import execute_from_command_line
        import sys
        # Run migrations silently
        execute_from_command_line(['manage.py', 'migrate', '--noinput'])
        print("Database tables created successfully!")
        
        # Create superuser if none exists
        from django.contrib.auth.models import User
        if not User.objects.exists():
            User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
            print("Superuser 'admin' created with password 'admin123'")
        else:
            print("Superuser already exists")
            
    except Exception as e:
        print(f"Auto-creation failed: {e}")
        print("You may need to run migrations manually")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Lagos'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Add whitenoise for static files (only in production)
if not DEBUG:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/'
#LOGIN_URL = '/admin-panel/admin_login/'  # üëà Customize this to whatever you like!
LOGIN_REDIRECT_URL = '/admin-panel/dashboard/'
#LOGIN_REDIRECT_URL = '/admin_login/'
#LOGIN_REDIRECT_URL = '/attendance/'
SUPERUSER_PASSKEY = 'super123'  # üõ°Ô∏è Replace with your real secret
#LOGIN_URL = '/accounts/login/'            # Page shown when login is required
#LOGIN_REDIRECT_URL = '/dashboard/'        # Page shown after successful login

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

# Logging configuration for production debugging
if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }



 